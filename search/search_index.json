{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Selamat Datang... \u00b6 NAMA : ABD. KIFLI NIM : 180411100033 PRODI : TEKNIK INFORMATIKA FAKULTAS : TEKNIK","title":"Beranda"},{"location":"#selamat-datang","text":"NAMA : ABD. KIFLI NIM : 180411100033 PRODI : TEKNIK INFORMATIKA FAKULTAS : TEKNIK","title":"Selamat Datang..."},{"location":"tugas1/","text":"DERET MACLAURIN \u00b6 Deret MacLaurin merupakan suatu fungsi f(x) yang memiliki turunan f'(x), f\u201d(x), f\u201d'(x), dan seterusnya yang kontinyu dalam interval I dan a, x I maka untuk x disekitar a yaitu |x \u2013 a| < , f(x) dapat diekspansi kedalam Deret Taylor. contoh Deret Maclaurin : $$ f(x) = f(0)+f'(0) \\frac{x}{1!}+f''(0) \\frac{x^2}{2!}+f'''(0) \\frac{x^3}{3!}+... $$ Soal \u00b6 tentukan e^2x dengan x = 4 dan ekspansi eror < 0,001. Penyelesaian \u00b6 Perhitungan e^2x Dalam banyak masalah terapan, pilihan basis yang mudah digunakan adalah bilangan irasional e = 2,718281828... Bilangan ini disebut basis natural . Fungsi f ( x ) = ex disebut sebagai fungsi eksponensial natural. . Pastikan bahwa dalam melihat fungsi eksponensial f ( x ) = ex , e adalah konstanta 2,718281828\u2026, sedangkan x adalah variabel. f(x)=ex f'(x) = ex f'(0) = 1 f\u201d(x) = ex f\u201d(0) = 1 f\u201d'(x) = ex f\u201d'(0) = 1 Untuk bilangan e2^x maka: cara perhitungannya adalah sebagai berikut: Jika nilai x diganti dengan 4 maka hasilnya adalah 296,99 Listing Program \u00b6 Untuk membuat program agar dapat mengekspansi bilangan e^2x dengan nilai x=4 hingga nilai menjadi kurang dari 0,001 bisa dibuat dengan listing program sebagai berikut. import math x = 4 hsl = 1 a = 0 b = 1 ulang = 1 while hsl > 0.001 : fx = 0 fy = 0 for i in range ( a ): fx += ( 2 ** i ) * x ** i / math . factorial ( i ) for j in range ( b ): fy += ( 2 ** j ) * x ** j / math . factorial ( j ) hsl = fy - fx a += 1 b += 1 print ( \"perulangan ke\" , ulang , \"= \" , hsl ) ulang += 1 Output: perulangan ke 1 = 1.0 perulangan ke 2 = 8.0 perulangan ke 3 = 32.0 perulangan ke 4 = 85.33333333333333 perulangan ke 5 = 170.66666666666669 perulangan ke 6 = 273.0666666666666 perulangan ke 7 = 364.08888888888896 perulangan ke 8 = 416.1015873015872 perulangan ke 9 = 416.1015873015872 perulangan ke 10 = 369.8680776014112 perulangan ke 11 = 295.89446208112895 perulangan ke 12 = 215.195972422639 perulangan ke 13 = 143.46398161509296 perulangan ke 14 = 88.28552714774924 perulangan ke 15 = 50.448872655856576 perulangan ke 16 = 26.90606541645684 perulangan ke 17 = 13.45303270822842 perulangan ke 18 = 6.330838921519444 perulangan ke 19 = 2.8137061873417224 perulangan ke 20 = 1.184718394670199 perulangan ke 21 = 0.47388735786807956 perulangan ke 22 = 0.18052851728316455 perulangan ke 23 = 0.06564673355751438 perulangan ke 24 = 0.022833646454728296 perulangan ke 25 = 0.0076112154847578495 perulangan ke 26 = 0.0024355889549951826 perulangan ke 27 = 0.0007494119863622473 MathJax.Hub.Config({ tex2jax:{inlineMath:[['$$','$$']]} });","title":"Tugas 1 (Deret Maclaurin)"},{"location":"tugas1/#deret-maclaurin","text":"Deret MacLaurin merupakan suatu fungsi f(x) yang memiliki turunan f'(x), f\u201d(x), f\u201d'(x), dan seterusnya yang kontinyu dalam interval I dan a, x I maka untuk x disekitar a yaitu |x \u2013 a| < , f(x) dapat diekspansi kedalam Deret Taylor. contoh Deret Maclaurin : $$ f(x) = f(0)+f'(0) \\frac{x}{1!}+f''(0) \\frac{x^2}{2!}+f'''(0) \\frac{x^3}{3!}+... $$","title":"DERET MACLAURIN"},{"location":"tugas1/#soal","text":"tentukan e^2x dengan x = 4 dan ekspansi eror < 0,001.","title":"Soal"},{"location":"tugas1/#penyelesaian","text":"Perhitungan e^2x Dalam banyak masalah terapan, pilihan basis yang mudah digunakan adalah bilangan irasional e = 2,718281828... Bilangan ini disebut basis natural . Fungsi f ( x ) = ex disebut sebagai fungsi eksponensial natural. . Pastikan bahwa dalam melihat fungsi eksponensial f ( x ) = ex , e adalah konstanta 2,718281828\u2026, sedangkan x adalah variabel. f(x)=ex f'(x) = ex f'(0) = 1 f\u201d(x) = ex f\u201d(0) = 1 f\u201d'(x) = ex f\u201d'(0) = 1 Untuk bilangan e2^x maka: cara perhitungannya adalah sebagai berikut: Jika nilai x diganti dengan 4 maka hasilnya adalah 296,99","title":"Penyelesaian"},{"location":"tugas1/#listing-program","text":"Untuk membuat program agar dapat mengekspansi bilangan e^2x dengan nilai x=4 hingga nilai menjadi kurang dari 0,001 bisa dibuat dengan listing program sebagai berikut. import math x = 4 hsl = 1 a = 0 b = 1 ulang = 1 while hsl > 0.001 : fx = 0 fy = 0 for i in range ( a ): fx += ( 2 ** i ) * x ** i / math . factorial ( i ) for j in range ( b ): fy += ( 2 ** j ) * x ** j / math . factorial ( j ) hsl = fy - fx a += 1 b += 1 print ( \"perulangan ke\" , ulang , \"= \" , hsl ) ulang += 1 Output: perulangan ke 1 = 1.0 perulangan ke 2 = 8.0 perulangan ke 3 = 32.0 perulangan ke 4 = 85.33333333333333 perulangan ke 5 = 170.66666666666669 perulangan ke 6 = 273.0666666666666 perulangan ke 7 = 364.08888888888896 perulangan ke 8 = 416.1015873015872 perulangan ke 9 = 416.1015873015872 perulangan ke 10 = 369.8680776014112 perulangan ke 11 = 295.89446208112895 perulangan ke 12 = 215.195972422639 perulangan ke 13 = 143.46398161509296 perulangan ke 14 = 88.28552714774924 perulangan ke 15 = 50.448872655856576 perulangan ke 16 = 26.90606541645684 perulangan ke 17 = 13.45303270822842 perulangan ke 18 = 6.330838921519444 perulangan ke 19 = 2.8137061873417224 perulangan ke 20 = 1.184718394670199 perulangan ke 21 = 0.47388735786807956 perulangan ke 22 = 0.18052851728316455 perulangan ke 23 = 0.06564673355751438 perulangan ke 24 = 0.022833646454728296 perulangan ke 25 = 0.0076112154847578495 perulangan ke 26 = 0.0024355889549951826 perulangan ke 27 = 0.0007494119863622473 MathJax.Hub.Config({ tex2jax:{inlineMath:[['$$','$$']]} });","title":"Listing Program"},{"location":"tugas2/","text":"Program Metode Newton Raphson Pada Fungsi Non Linear \u00b6 Metode Newthon Raphson \u00b6 Metode Newton-Raphson adalah metode pencarian akar suatu fungsi f(x) dengan pendekatan satu titik, dimana fungsi f(x) mempunyai turunan. Metode ini dianggap lebih mudah dari Metode (Bisection Method) karena metode ini menggunakan pendekatan satu titik sebagai titik awal. Semakin dekat titik awal yang kita pilih dengan akar sebenarnya, maka semakin cepat konvergen ke akarnya. Prosedur Metode Newton : Algoritma Metode Newton Repshon \u00b6 Listing Program \u00b6 #Program python untuk memperkirakan akar polinomial #menggunakan metode newton-raphson import math #f(x) - fungsi polynomial def f(x): function = (x**3) - (2*x) - 1 return function def derivative(x): #berfungsi untuk menemukan turunan dari polinomial h = 0.000001 derivative = (f(x + h) - f(x)) / h return derivative def newton_raphson(x): return (x - (f(x) / derivative(x))) # p - titik awal mis. nilai lebih dekat ke root # n - jmulah iterasi def perulangan(p, n): print(\"Banyak Iterasinya =\",n) x = p for i in range(n): x = newton_raphson(x) print(\"perulangan ke-\", i + 1, \"=\", x) return (\"\") print(perulangan(1, 12)) #cetakan akar polinomial x ^ 3 - 2x - 1 menggunakan 3 iterasi dan ambil titik awal sebagai 1 Output: Banyak Iterasinya = 12 perulangan ke- 1 = 2.999994000093219 perulangan ke- 2 = 2.199996832141079 perulangan ke- 3 = 1.7808294919560141 perulangan ke- 4 = 1.6363030634057565 perulangan ke- 5 = 1.618304588651506 perulangan ke- 6 = 1.6180340496697716 perulangan ke- 7 = 1.6180339887499484 perulangan ke- 8 = 1.6180339887498947 perulangan ke- 9 = 1.618033988749895 perulangan ke- 10 = 1.618033988749895 perulangan ke- 11 = 1.618033988749895 perulangan ke- 12 = 1.618033988749895","title":"Tugas 2 (Newton Rapshon)"},{"location":"tugas2/#program-metode-newton-raphson-pada-fungsi-non-linear","text":"","title":"Program Metode Newton Raphson Pada Fungsi Non Linear"},{"location":"tugas2/#metode-newthon-raphson","text":"Metode Newton-Raphson adalah metode pencarian akar suatu fungsi f(x) dengan pendekatan satu titik, dimana fungsi f(x) mempunyai turunan. Metode ini dianggap lebih mudah dari Metode (Bisection Method) karena metode ini menggunakan pendekatan satu titik sebagai titik awal. Semakin dekat titik awal yang kita pilih dengan akar sebenarnya, maka semakin cepat konvergen ke akarnya. Prosedur Metode Newton :","title":"Metode Newthon Raphson"},{"location":"tugas2/#algoritma-metode-newton-repshon","text":"","title":"Algoritma Metode Newton Repshon"},{"location":"tugas2/#listing-program","text":"#Program python untuk memperkirakan akar polinomial #menggunakan metode newton-raphson import math #f(x) - fungsi polynomial def f(x): function = (x**3) - (2*x) - 1 return function def derivative(x): #berfungsi untuk menemukan turunan dari polinomial h = 0.000001 derivative = (f(x + h) - f(x)) / h return derivative def newton_raphson(x): return (x - (f(x) / derivative(x))) # p - titik awal mis. nilai lebih dekat ke root # n - jmulah iterasi def perulangan(p, n): print(\"Banyak Iterasinya =\",n) x = p for i in range(n): x = newton_raphson(x) print(\"perulangan ke-\", i + 1, \"=\", x) return (\"\") print(perulangan(1, 12)) #cetakan akar polinomial x ^ 3 - 2x - 1 menggunakan 3 iterasi dan ambil titik awal sebagai 1 Output: Banyak Iterasinya = 12 perulangan ke- 1 = 2.999994000093219 perulangan ke- 2 = 2.199996832141079 perulangan ke- 3 = 1.7808294919560141 perulangan ke- 4 = 1.6363030634057565 perulangan ke- 5 = 1.618304588651506 perulangan ke- 6 = 1.6180340496697716 perulangan ke- 7 = 1.6180339887499484 perulangan ke- 8 = 1.6180339887498947 perulangan ke- 9 = 1.618033988749895 perulangan ke- 10 = 1.618033988749895 perulangan ke- 11 = 1.618033988749895 perulangan ke- 12 = 1.618033988749895","title":"Listing Program"}]}